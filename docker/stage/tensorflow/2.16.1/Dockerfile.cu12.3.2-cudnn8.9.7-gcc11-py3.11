# syntax=docker/dockerfile:1.9.0
FROM ubuntu:22.04 AS builder

#### Common start ####
RUN apt-get update -y \
  && apt-get install -y \
    curl wget git ncdu ca-certificates xz-utils patchelf
# install gcc
RUN apt-get install -y gcc-11 g++-11

# install python
RUN apt-get install -y python3.11 python3.11-dev python3-pip

# install bazel
RUN curl -sSL -o bazelisk https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64 \
  && chmod +x bazelisk \
  && mv bazelisk /usr/local/bin/bazel
#### Common end ####

COPY --link --from=curoky/dotbox:stage-cuda-cu12.3.2-cudnn8.9.7 /home/x/app/nvidia/cuda-12.3.2 /home/x/app/nvidia/cuda-12.3.2
COPY --link --from=curoky/dotbox:stage-cuda-cu12.3.2-cudnn8.9.7 /home/x/app/nvidia/cudnn8.9.7-cu12 /home/x/app/nvidia/cudnn8.9.7-cu12

ENV TF_CUDA_VERSION=12.3 \
  TF_CUDNN_VERSION=8 \
  TF_CUDA_COMPUTE_CAPABILITIES="sm_75,compute_75,sm_80,compute_80,sm_86,compute_86" \
  TF_PYTHON_VERSION="3.11" \
  GCC_HOST_COMPILER_PATH=/usr/bin/gcc-11 \
  CUDA_TOOLKIT_PATH=/home/x/app/nvidia/cuda-12.3.2 \
  CUDNN_INSTALL_PATH=/home/x/app/nvidia/cudnn8.9.7-cu12

RUN ln -s /home/x/app/nvidia/cuda-12.3.2 /usr/local/cuda
RUN git clone --recurse-submodules --depth=1 -b v2.16.1 https://github.com/tensorflow/tensorflow
WORKDIR /tensorflow
RUN echo 'startup --host_jvm_args=-Djava.net.preferIPv6Addresses=true' >> .bazelrc
# RUN echo 'build --repo_env=TF_CUDA_COMPUTE_CAPABILITIES="compute_90"' >> .bazelrc
# RUN ln -s /usr/bin/python3.11 /usr/bin/python
RUN bazel build //tensorflow/tools/pip_package:build_pip_package \
    --repo_env=WHEEL_NAME=tensorflow \
    --config=v2 \
    --config=avx_linux \
    # --config=tensorrt \
    --config=cuda \
    --config=noaws \
    --config=nogcp \
    --config=nohdfs \
    --config=nonccl
RUN ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /output \
  && ls -lah /output/tensorflow-2.16.1-cp311-cp311-linux_x86_64.whl \
  && rm -rf /root/.cache /tensorflow

FROM debian:latest

COPY --from=builder /output /output
