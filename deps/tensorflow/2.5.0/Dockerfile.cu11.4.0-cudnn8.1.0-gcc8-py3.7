# syntax=docker/dockerfile:1.9.0
FROM ubuntu:18.04 AS builder

#### Common start ####
RUN apt-get update -y \
  && apt-get install -y \
    curl wget git ncdu ca-certificates xz-utils patchelf

# install gcc
RUN apt-get install -y gcc-8 g++-8

# install python
RUN apt-get install -y python3.7 python3.7-dev python3-pip \
  && python3.7 -m pip install numpy==1.19.5 keras_preprocessing==1.1.2 \
  && ln -sf /usr/bin/python3.7 /usr/bin/python

# install bazel
RUN curl -sSL -o bazelisk https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64 \
  && chmod +x bazelisk \
  && mv bazelisk /usr/local/bin/bazel
#### Common end ####

COPY --link --from=curoky/devspace:stage-cuda-cu11.4.0-cudnn8.1.0 /opt/nvidia/cuda-11.4.0 /opt/nvidia/cuda-11.4.0
COPY --link --from=curoky/devspace:stage-cuda-cu11.4.0-cudnn8.1.0 /opt/nvidia/cudnn8.1.0-cu11 /opt/nvidia/cudnn8.1.0-cu11

RUN git clone --recurse-submodules --depth=1 -b v2.5.0 https://github.com/tensorflow/tensorflow
WORKDIR /tensorflow
RUN sed -i -e 's|zlib.net/zlib|zlib.net/fossils/zlib|g' tensorflow/workspace2.bzl

RUN cat <<EOF >> .bazelrc
startup --host_jvm_args=-Djava.net.preferIPv6Addresses=true

# for gcc
build --action_env GCC_HOST_COMPILER_PATH="/usr/bin/gcc-8"

build:opt --copt=-Wno-sign-compare
build:opt --host_copt=-Wno-sign-compare

# for python
build --python_path="/usr/bin/python3.7"
build --repo_env=PYTHON_BIN_PATH="/usr/bin/python3.7"
# build --repo_env=WHEEL_NAME=tensorflow

# for cudat
build:cuda --action_env TF_CUDA_VERSION="11.4"
build:cuda --action_env TF_CUDA_PATHS="/opt/nvidia/cuda-11.4.0"
build:cuda --action_env TF_CUDNN_VERSION="8" # or "8.1.0"
# build:cuda --action_env TF_CUDA_COMPUTE_CAPABILITIES="sm_75,compute_75,sm_80,compute_80,sm_86,compute_86"
build:cuda --action_env TF_CUDA_COMPUTE_CAPABILITIES="sm_75,sm_80,sm_86"
build:cuda --action_env CUDA_TOOLKIT_PATH="/opt/nvidia/cuda-11.4.0"
build:cuda --action_env CUDNN_INSTALL_PATH="/opt/nvidia/cudnn8.1.0-cu11"

EOF

ARG USE_CXX11_ABI=0
RUN bazel build //tensorflow/tools/pip_package:build_pip_package \
    --repo_env=WHEEL_NAME=tensorflow \
    --repo_env=PYTHON_BIN_PATH="/usr/bin/python3.7" \
    --python_path="/usr/bin/python3.7" \
    --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=${USE_CXX11_ABI}" \
    --config=v2 \
    --config=avx_linux \
    # --config=monolithic \
    # --config=tensorrt \
    --config=cuda \
    --config=noaws \
    --config=nogcp \
    --config=nohdfs \
    --config=nonccl
RUN ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /output

FROM debian:latest

COPY --from=builder /output /output

RUN ls -lah /output/tensorflow-2.5.0-cp37-cp37m-linux_x86_64.whl
