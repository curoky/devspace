# syntax=docker/dockerfile:1.9.0
FROM ubuntu:24.04 AS builder

#### Common start ####
RUN apt-get update -y \
  && apt-get install -y \
    curl wget git ncdu ca-certificates xz-utils patchelf
# install gcc
RUN apt-get install -y gcc-12 g++-12

# install clang
RUN apt-get install -y clang-17 lld-17

# install python
RUN apt-get install -y python3.12 python3.12-dev python3-pip

# install bazel
RUN curl -sSL -o bazelisk https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64 \
  && chmod +x bazelisk \
  && mv bazelisk /usr/local/bin/bazel
#### Common end ####

COPY --link --from=curoky/dotbox:stage-cuda-cu12.3.2-cudnn8.9.7 /opt/nvidia/cuda-12.3.2 /opt/nvidia/cuda-12.3.2
COPY --link --from=curoky/dotbox:stage-cuda-cu12.3.2-cudnn8.9.7 /opt/nvidia/cudnn8.9.7-cu12 /opt/nvidia/cudnn8.9.7-cu12

# ENV TF_CUDA_VERSION=12.3 \
#   TF_CUDNN_VERSION=8 \
#   TF_CUDA_COMPUTE_CAPABILITIES="sm_75,compute_75,sm_80,compute_80,sm_86,compute_86" \
#   TF_PYTHON_VERSION="3.12" \
#   # GCC_HOST_COMPILER_PATH=/usr/bin/gcc-12 \
#   CUDA_TOOLKIT_PATH=/opt/nvidia/cuda-12.3.2 \
#   CUDNN_INSTALL_PATH=/opt/nvidia/cudnn8.9.7-cu12

# RUN ln -s /opt/nvidia/cuda-12.3.2 /usr/local/cuda
RUN git clone --recurse-submodules --depth=1 -b v2.18.1 https://github.com/tensorflow/tensorflow
WORKDIR /tensorflow
# RUN echo 'startup --host_jvm_args=-Djava.net.preferIPv6Addresses=true' >> .bazelrc
# RUN echo 'build --repo_env=TF_CUDA_COMPUTE_CAPABILITIES="compute_90"' >> .bazelrc
# RUN ln -s /usr/bin/python3.12 /usr/bin/python
# RUN echo 'build --action_env PYTHON_BIN_PATH="{}"' >> .bazelrc
# RUN echo 'build --action_env PYTHON_LIB_PATH="{}"' >> .bazelrc
# RUN echo 'build --action_env PYTHONPATH="{}"' >> .bazelrc
# RUN echo 'build --python_path=""' >> .bazelrc
# RUN echo 'build --action_env {}="{}"' >> .bazelrc
# RUN echo 'build --action_env TF_CUDA_CLANG=""' >> .bazelrc
# RUN echo 'build --action_env TF_DOWNLOAD_CLANG=""' >> .bazelrc
# RUN echo 'build --action_env CLANG_CUDA_COMPILER_PATH=""' >> .bazelrc
# RUN echo 'build --action_env CLANG_COMPILER_PATH=""' >> .bazelrc
# RUN echo 'build --repo_env=CC=%s' >> .bazelrc
# RUN echo 'build --repo_env=BAZEL_COMPILER=%s' >> .bazelrc
# RUN echo 'build --action_env GCC_HOST_COMPILER_PATH="/usr/bin/gcc-12"' >> .bazelrc
# RUN echo 'build --config=cuda' >> .bazelrc
# RUN echo 'build:{} --repo_env =""' >> .bazelrc

RUN cat <<EOF >> .bazelrc
startup --host_jvm_args=-Djava.net.preferIPv6Addresses=true

# for clang
build --repo_env=CC=/usr/lib/llvm-17/bin/clang
build --repo_env=BAZEL_COMPILER=/usr/lib/llvm-17/bin/clang
build --action_env CLANG_CUDA_COMPILER_PATH=/usr/lib/llvm-17/bin/clang
build --action_env CLANG_COMPILER_PATH=/usr/lib/llvm-17/bin/clang
build --copt=-Wno-gnu-offsetof-extensions

# for python
build --action_env PYTHON_BIN_PATH="/usr/bin/python3.12"
build --action_env PYTHON_LIB_PATH="/usr/lib/python3.12/site-packages"
build --python_path="/usr/bin/python3.12"
# build --repo_env=WHEEL_NAME=tensorflow
# build --repo_env=USE_PYWRAP_RULES=1

# for cuda
build:cuda --action_env TF_NEED_CUDA=1
build:cuda --action_env TF_CUDA_CLANG=1
# build:cuda --repo_env HERMETIC_CUDA_VERSION="12.3.2"
# build:cuda --repo_env HERMETIC_CUDNN_VERSION="9.3.0"
build:cuda --repo_env HERMETIC_CUDA_COMPUTE_CAPABILITIES="sm_80,sm_86"
build:cuda --repo_env LOCAL_CUDA_PATH="/opt/nvidia/cuda-12.3.2"
build:cuda --repo_env LOCAL_CUDNN_PATH="/opt/nvidia/cudnn8.9.7-cu12"

EOF

RUN bazel build //tensorflow/tools/pip_package:wheel \
    --config=v2 \
    # --config=opt \
    --config=avx_linux \
    --config=monolithic \
    # --config=tensorrt \
    --config=cuda_clang \
    --config=cuda_wheel \
    # --config=noaws \
    --config=nogcp \
    # --config=nohdfs \
    --config=nonccl

FROM debian:latest

COPY --from=builder /tensorflow/bazel-bin/tensorflow/tools/pip_package/wheel_house/ /output

RUN ls -lah /output/tensorflow-2.18.1-cp312-cp312-linux_x86_64.whl
